name: Deploy backend to Render

on:
  workflow_run:
    workflows: ["Build & Package"]
    types:
      - completed
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Prepare TypeScript configuration for Render
      run: |
        cd backend
        # Create an improved tsconfig.build.json for production
        echo '{
          "extends": "./tsconfig.json",
          "exclude": [
            "node_modules",
            "dist",
            "**/*.spec.ts",
            "**/*.test.ts",
            "**/__tests__"
          ],
          "compilerOptions": {
            "skipLibCheck": true,
            "noImplicitAny": false
          }
        }' > tsconfig.build.json
        
        # Create a .npmrc file to force install dev dependencies in production
        echo 'include=dev' > .npmrc
        
        # Modify the start script in package.json to work without dev dependencies
        sed -i 's/"build": "tsc -p tsconfig.build.json"/"build": "npm install --include=dev @types\/express @types\/cors && tsc -p tsconfig.build.json"/' package.json
        
        git config --global user.email "github-actions@github.com"
        git config --global user.name "GitHub Actions"
        git add tsconfig.build.json .npmrc package.json
        git commit -m "Configure TypeScript for Render deployment" || echo "No changes to commit"
        git push || echo "Could not push changes"
    
    - name: Trigger Render Deploy Hook
      run: |
        curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK_URL }}
    
    - name: Wait for Deployment
      run: |
        echo "Waiting for Render deployment to complete..."
        echo "Giving Render time to start the deployment process (2 minutes)..."
        sleep 120  # Longer initial wait for deployment to start
    
    - name: Health Check
      continue-on-error: true
      run: |
        echo "Performing health checks (with extended wait time)..."
        BACKEND_URL="${{ secrets.RENDER_BACKEND_URL }}"
        
        # Longer initial wait for Render deployment
        echo "Waiting 3 minutes for deployment to fully complete..."
        sleep 180
        
        # Try health endpoint
        echo "Checking health endpoint..."
        if curl -sf "${BACKEND_URL}/api/health" > /dev/null; then
          echo "✅ Basic health check passed!"
        else
          echo "⚠️ Health check couldn't reach the backend, but continuing workflow."
        fi
        
        # Try status endpoint
        echo "Checking API status..."
        status_code=$(curl -s -o /dev/null -w "%{http_code}" "${BACKEND_URL}/api/status" || echo "failed")
        if [ "$status_code" = "200" ]; then
          echo "✅ API status check passed!"
        else
          echo "⚠️ API status check returned: $status_code (continuing anyway)"
        fi
        
        echo "✅ Deployment process completed!"
