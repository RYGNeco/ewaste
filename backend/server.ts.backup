import express from 'express';
import dotenv from 'dotenv';
import cors from 'cors';
import cookieParser from 'cookie-parser';
import helmet from 'helmet';
import passport from 'passport';
import './config/passport';  // OAuth config
import connectDB from './config/db';  // Database connection
import './config/passport';  // Passport configuration
import authRoutes from './routes/authRoutes';

dotenv.config();
connectDB();

const app = express();

// ðŸ”’ Security Middleware
app.use(helmet());
<<<<<<< HEAD
const allowedOrigins = [
  'http://localhost:3000',
  'http://localhost:3006',
  process.env.FRONTEND_URL
];
app.use(cors({
  origin: function (origin, callback) {
    // allow requests with no origin (like mobile apps, curl, etc.)
    if (!origin) return callback(null, true);
    if (allowedOrigins.includes(origin)) {
      return callback(null, true);
    } else {
      return callback(new Error('Not allowed by CORS'));
    }
  },
  credentials: true
}));
=======
app.use(cors({ origin: process.env.FRONTEND_URL, credentials: true }));
>>>>>>> c1d976faeace438720baff3c129c4dea43581e86
app.use(express.json());
app.use(cookieParser());
app.use(passport.initialize());

// ðŸš€ Routes
<<<<<<< HEAD
// Override CORS for Google register route to always allow frontend
import cors from 'cors';
app.options('/api/auth/google-register', cors({
  origin: allowedOrigins,
  credentials: true
}));
app.post('/api/auth/google-register', cors({
  origin: allowedOrigins,
  credentials: true
}), (req, res, next) => {
  // Forward to the actual route handler
  require('./src/routes/auth').default.handle(req, res, next);
});
// All other auth routes
=======
>>>>>>> c1d976faeace438720baff3c129c4dea43581e86
app.use('/api/auth', authRoutes);

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`âœ… Server running on port ${PORT}`));
